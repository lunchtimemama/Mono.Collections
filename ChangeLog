2009-05-13  Scott Peterson  <lunchtimemama@gmail.com>

	* Mono.Collections/Mono.Collections.DataStructures/ContiguousTernarySearchTree.cs:
	* Mono.Collections.Tests/ContiguousTernarySearchTreeTests.cs:
	Renamed to the data structure to the more well-known "ternary search
	tree."

2009-05-13  Scott Peterson  <lunchtimemama@gmail.com>

	* Mono.Collections/Mono.Collections.DataStructures/ContiguougSplayedRadixTree.cs:
	Uncovered a little bug while unit testing. Yeah! Fixed.

	* Mono.Collections.Tests/ContiguougSplayedRadixTreeTests.cs: Added a new
	test which stores and retrieves all of the countries in the world
	(according to the 2008 CIA World Factbook).

	* Mono.Collections.Tests/data/world: Added a file with the countries/
	regions of the world in alphabetical order.

2009-05-13  Scott Peterson  <lunchtimemama@gmail.com>

	* Mono.Collections/Mono.Collections.Internal/SinglyLinkedList.cs: Had
	build bugs in here. Oops. Guess I got a little excited.

2009-05-13  Scott Peterson  <lunchtimemama@gmail.com>

	* Mono.Collections/Mono.Collections.DataStructures/ContiguougSplayedRadixTree.cs:
	It's alive! The CSRT is now in working order. There is more API work to
	be done (for example, we currently take for granted that you pass a
	sorted collection of keys and values), but all of the logic is in place.
	This is about as good as string key lookup gets, kids. For a virtual
	machine, anyway. And for read-only data sets. Of fewer than 65,536
	items. YEAH!

	* Mono.Collections/Mono.Collections.Internal/SinglyLinkedList.cs:
	* Mono.Collections/Mono.Collections.Internal/SinglyLinkedListNode.cs:
	Added simple singly linked list for use in the CSRT constructor. It
	has some nessisary functionality that is lacking from the BCL LL.

	* Mono.Collections.Tests/*: If you're not writing unit tests, you're not
	doing it right. A simple correctness test for the CSRT. Need more tests!

2009-05-13  Scott Peterson  <lunchtimemama@gmail.com>

	Initial commit. This sets up the project and includes the data structure
	which inspired the project, the good ole ContiguousSplayedRadixTree.
	The CSRT is appropriate when using string keys for lookup into a read-
	only collection of fewer than 65,536 items when many of the keys share
	prefixs. The structure is only half-done: the lookup algorithm is
	written (but not tested), but the constructor is currently empty - there
	is no way to get data into the structure.

	I would like this project to become an effort to learn about, build,
	test and discuss data structures. I personally haven't done serious
	asymptotic analysis or data structure study since college. I usually
	just use one of a few types from System.Collections.Generic: a List
	for storing stuff, a Dictionary for lookup, and a Stack or Queue for
	certain algorithms. I would really like to work with other smart people
	on developing highly specialized data structures and studying their
	performance characteristics. Making these data structures available
	and useful would be nice, but at the moment I'm mainly interested in
	broadening my knowledge of data structures. Anyone interested in joining
	me is more than welcome!
